#!/bin/env php
<?php
/**
 * @author net_bazzline_create_executable_command_line_file
 * @since 2016-01-11
 */

//begin of including composer autoload.php
$possiblePathsToComposerAutoloadFile = array(
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php'
);
$pathToAutoloadFileNotFound = true;
$pathToAutoloadFile         = null;
foreach ($possiblePathsToComposerAutoloadFile as $path) {
    if (file_exists($path)) {
        $pathToAutoloadFile         = $path;
        $pathToAutoloadFileNotFound = false;
        break;
    }
}
if ($pathToAutoloadFileNotFound) {
    echo 'could not find composer autoload.php, no composer installed?' . PHP_EOL;
    exit(1);
}

require_once $pathToAutoloadFile;
//end of including composer autoload.php
use De\Leibelt\SendMail\DomainModel\Address;
use De\Leibelt\SendMail\DomainModel\HtmlMail;
use De\Leibelt\SendMail\DomainModel\TextMail;
use De\Leibelt\SendMail\Service\SwiftShipper;
use Net\Bazzline\Component\Cli\Environment\CommandLineEnvironment;

$environment    = new CommandLineEnvironment($argv);
//@todo
//  add attachment
//  add --bcc list
//  add --cc list
$usage          = basename(__FILE__) . ' "<email address of the sender>" "<email address of the recipient>" "<subject>" "<path/to/the/file.txt|html>" [--bcc="<email address of an blind carbon copy - can be used multiple times>"] [--cc="<email address of a carbon copy - can be used multiple times>"] [--attachment="path/to/a/file"] [-v|--verbose]';

$environment->execute(
    function (CommandLineEnvironment $environment) {
        //begin of input validation
        $arguments                          = $environment->getArguments();
        $listOfBlindCarbonCopy              = $arguments->getList('bcc');
        $listOfCarbonCopy                   = $arguments->getList('cc');
        $listOfFilesToAttach                = $arguments->getList('attachment');
        $values                             = $arguments->getValues();
        $invalidNumberOfArgumentsProvided   = (count($values) !== 4);

        if ($invalidNumberOfArgumentsProvided) {
            throw new InvalidArgumentException(
                'invalid number of arguments provided'
            );
        }

        $filePath   = $values[3];
        $recipient  = $values[1];
        $sender     = $values[0];
        $subject    = $values[2];

        $environment->outputIfVerbosityIsEnabled(
            array(
                'file path: ' . $filePath,
                'recipient: ' . $recipient,
                'sender: ' . $sender,
                'subject: ' . $subject
            )
        );

        $hasListOfBlindCarbonCopy   = (!is_null($listOfBlindCarbonCopy));
        $hasListOfCarbonCopy        = (!is_null($listOfCarbonCopy));
        $hasListOfFilesToAttach     = (!is_null($listOfFilesToAttach));

        if ($hasListOfBlindCarbonCopy) {
            foreach ($listOfBlindCarbonCopy as $blindCarbonCopy)  {
                $invalidCarbonCopyProvided = (!filter_var($blindCarbonCopy, FILTER_VALIDATE_EMAIL));

                if ($invalidCarbonCopyProvided) {
                    throw new InvalidArgumentException(
                        'invalid blind carbon copy provided'
                    );
                }
            }
        }
        //end of input validation

        //begin of business logic
        $attachments    = array();
        $bccs           = array();
        $ccs            = array();
        $file       = new SplFileObject($filePath);
        $content    = $file->fread($file->getSize());
        $isHtml     = (strtolower($file->getExtension()) === 'html');
        $shipper = new SwiftShipper();

        $environment->outputIfVerbosityIsEnabled('file content: ' . $content);
        $environment->outputIfVerbosityIsEnabled(($isHtml ? 'send it as html mail' : 'send it as text mail'));

        if ($hasListOfBlindCarbonCopy) {
            foreach ($listOfBlindCarbonCopy as $blindCarbonCopy) {
                $bccs[] = new Address($blindCarbonCopy);
            }
        }

        if ($hasListOfCarbonCopy) {
            foreach ($listOfCarbonCopy as $carbonCopy) {
                $ccs[] = new Address($carbonCopy);
            }
        }

        //begin of attachment handling
        if ($hasListOfFilesToAttach) {
            foreach ($listOfFilesToAttach as $filePath) {
                $file = new SplFileInfo($filePath);

                switch (strtolower($file->getExtension())) {
                    case 'jpeg':
                    case 'jpg':
                        $contentType = 'image/jpeg';
                        break;
                    case 'pdf':
                        $contentType = 'application/pdf';
                        break;
                    default:
                        $contentType = null;
                }

                $attachments[] = new \De\Leibelt\SendMail\DomainModel\Attachment(
                    $file->getPathname(),
                    $file->getBasename(),
                    $contentType
                );
            }
        }
        //end of attachment handling

        if ($isHtml) {
            $mail = new HtmlMail(
                $sender,
                $recipient,
                $subject,
                $content,
                $attachments,
                $ccs,
                $bccs
            );
        } else {
            $mail = new TextMail(
                $sender,
                $recipient,
                $subject,
                $content,
                $attachments,
                $ccs,
                $bccs
            );
        }

        $shipper->ship($mail);
        //end of business logic
    },
    $usage
);
