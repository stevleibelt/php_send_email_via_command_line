#!/bin/env php
<?php
/**
 * @author net_bazzline_create_executable_command_line_file
 * @since 2016-01-11
 */

//begin of including composer autoload.php
$possiblePathsToComposerAutoloadFile = [
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php'
];
$pathToAutoloadFileNotFound = true;
$pathToAutoloadFile         = null;

foreach ($possiblePathsToComposerAutoloadFile as $path) {
    if (file_exists($path)) {
        $pathToAutoloadFile         = $path;
        $pathToAutoloadFileNotFound = false;
        break;
    }
}
if ($pathToAutoloadFileNotFound) {
    echo 'could not find composer autoload.php, no composer installed?' . PHP_EOL;
    exit(1);
}

require_once $pathToAutoloadFile;
//end of including composer autoload.php

use De\Leibelt\SendMail\CommandBuilderFactory;
use Net\Bazzline\Component\Cli\Environment\CommandLineEnvironment;

$environment    = new CommandLineEnvironment($argv);
$usage          = basename(__FILE__)
    . ' "<email address of the sender>" "<email address of the recipient>" "<subject>" "<path/to/the/file.txt|html>" [--bcc="<email address of an blind carbon copy - can be used multiple times>"] [--cc="<email address of a carbon copy - can be used multiple times>"] [--attachment="path/to/a/file"] [-v|--verbose]';

$environment->execute(
    function (CommandLineEnvironment $environment) {
        //begin of input validation
        $arguments                          = $environment->getArguments();
        $listOfBlindCarbonCopy              = $arguments->getList('bcc');
        $listOfCarbonCopy                   = $arguments->getList('cc');
        $listOfFilesToAttach                = $arguments->getList('attachment');
        $values                             = $arguments->getValues();
        $invalidNumberOfArgumentsProvided   = (count($values) !== 4);

        if ($invalidNumberOfArgumentsProvided) {
            throw new InvalidArgumentException(
                'invalid number of arguments provided'
            );
        }

        $filePath   = $values[3];
        $recipient  = $values[1];
        $sender     = $values[0];
        $subject    = $values[2];

        $environment->outputIfVerbosityIsEnabled(
            [
                'file path: ' . $filePath,
                'recipient: ' . $recipient,
                'sender: ' . $sender,
                'subject: ' . $subject
            ]
        );

        $hasListOfBlindCarbonCopy   = (!is_null($listOfBlindCarbonCopy));
        $hasListOfCarbonCopy        = (!is_null($listOfCarbonCopy));
        $hasListOfFilesToAttach     = (!is_null($listOfFilesToAttach));
        //end of input validation

        //begin of business logic
        $factory        = new CommandBuilderFactory();
        $builder        = $factory->create();

        $builder->start()
            ->withPathToTheContentFile($filePath)
            ->withRecipient($recipient)
            ->withSender($sender)
            ->withSubject($subject);

        if ($hasListOfBlindCarbonCopy) {
            $builder->withListOfBlindCarbonCopy($listOfBlindCarbonCopy);
        }

        if ($hasListOfCarbonCopy) {
            $builder->withListOfCarbonCopy($listOfCarbonCopy);
        }

        if ($hasListOfFilesToAttach) {
            $builder->withListOfAttachments($listOfFilesToAttach);
        }

        $command = $builder->build();
        $command->execute();
        //end of business logic
    },
    $usage
);
